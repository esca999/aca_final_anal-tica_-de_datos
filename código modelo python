import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Cargar los datos
df = pd.read_csv("/home/calidad/Downloads/afluencia_gimnasio.csv")

# Exploración inicial
def explorar_datos(df):
    print("Primeras filas del dataset:")
    print(df.head())
    print("\nResumen estadístico:")
    print(df.describe())
    print("\nValores nulos:")
    print(df.isnull().sum())

# **Visualización de datos antes de la transformación**
def visualizar_datos(df):
    if "Hora del Día" in df.columns and "Cantidad de Personas" in df.columns:
        plt.figure(figsize=(10, 5))
        sns.boxplot(x='Hora del Día', y='Cantidad de Personas', data=df, palette="coolwarm")
        plt.title("Distribución de personas en el gimnasio por hora del día")
        plt.xticks(rotation=45)
        plt.show()
    else:
        print("Las columnas necesarias para la visualización no están presentes.")

    if "Día de la Semana" in df.columns and "Cantidad de Personas" in df.columns:
        plt.figure(figsize=(10, 5))
        sns.boxplot(x='Día de la Semana', y='Cantidad de Personas', data=df, palette="viridis")
        plt.title("Distribución de personas en el gimnasio por día de la semana")
        plt.xticks(rotation=45)
        plt.show()
    else:
        print("Las columnas necesarias para la visualización no están presentes.")

# **Ejecutar visualización antes de modificar las columnas**
if __name__ == "__main__":
    explorar_datos(df)
    visualizar_datos(df)  # Se ejecuta antes de modificar el DataFrame

# Preprocesamiento de datos
if "Día de la Semana" in df.columns and "Hora del Día" in df.columns and "Mes" in df.columns:
    df = pd.get_dummies(df, columns=["Día de la Semana", "Hora del Día", "Mes"], drop_first=True)
else:
    print("Algunas de las columnas categóricas no están presentes en el dataset.")

# Verificar si la columna objetivo está en los datos
if "Cantidad de Personas" in df.columns:
    X = df.drop(columns=["Cantidad de Personas"])
    y = df["Cantidad de Personas"]

    # División de datos en entrenamiento y prueba
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Entrenamiento del modelo
    modelo = LinearRegression()
    modelo.fit(X_train, y_train)

    # Predicción
    y_pred = modelo.predict(X_test)

    # Evaluación del modelo
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)

    print(f"MAE: {mae:.2f}")
    print(f"RMSE: {rmse:.2f}")

else:
    print("La columna 'Cantidad de Personas' no está en el dataset.")

